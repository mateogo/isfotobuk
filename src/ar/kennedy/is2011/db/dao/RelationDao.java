package ar.kennedy.is2011.db.dao;

import ar.kennedy.is2011.db.entities.Article;
import ar.kennedy.is2011.db.entities.Task;
import ar.kennedy.is2011.db.entities.User;
import ar.kennedy.is2011.db.entities.EntityRelationHeader;
//import ar.kennedy.is2011.db.entities.EntityRelations;
import ar.kennedy.is2011.db.exception.EntityNotFoundException;
import ar.kennedy.is2011.utils.WebUtils;

import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;

import com.google.appengine.api.datastore.Key;


public class RelationDao {

	private static final Logger log = Logger.getLogger(AbstractDao.class);

	private static final String RELATIONS_FOR_ENTITY  =  "SELECT e FROM EntityRelationHeader e WHERE e.entityType = :1 AND e.entityId = :2 ";
	private static final String RELATIONS_FOR_PICTURE =  "SELECT e FROM EntityRelationHeader e WHERE e.ownerId = :1 and e.pictureId = :2";
	private static final String RELATIONS_BY_PREDICATE_NAME =  "SELECT e FROM EntityRelationHeader e WHERE e.predicate = :1 and e.subject = :2";

	
	private AbstractDao<Article> articDAO = new AbstractDao<Article>();
	private AbstractDao<Task> taskDAO = new AbstractDao<Task>();
	private AbstractDao<EntityRelationHeader> erelationDAO = new AbstractDao<EntityRelationHeader>();
	//private AbstractDao<EntityRelations> relitemDAO = new AbstractDao<EntityRelations>();

	private User user;

	private Article article;
	private List<Article> articles;

	private Task task;
	private List<Task> tasks;



	public RelationDao() {
		// TODO Auto-generated constructor stub
	}

	public RelationDao(User us) {
		// TODO Auto-generated constructor stub
		this();
		setUser(us);
	}

	public void updateRelation(EntityRelationHeader erh){
		try{
			log.debug("=== trying update this.erelation");
			erelationDAO.persist(erh);
		} catch (Exception e) {
			erelationDAO.rollBackTx();
			log.error(e.getMessage());
		}finally{
		}

	}

	public EntityRelationHeader fetchRelation(Key key){
		if(key==null) return null;

		try {
			return erelationDAO.findById(EntityRelationHeader.class, key);			
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	public EntityRelationHeader fetchERelationById(String id){
		if(WebUtils.isNull(id)) return null;
		Long lid = Long.parseLong(id);
		return fetchERelationById(lid);
	}

	public EntityRelationHeader fetchERelationById(Long id){
		if(id==null) return null;
		if(id<=0) return null;
		try {
			return erelationDAO.findById(EntityRelationHeader.class, id);

		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	
	public List<EntityRelationHeader> fetchRelationsForPicture(User user, String pictureId) {
		Vector<Object> fvec = new Vector<Object>();
		fvec.add(user.getKey().getId());
		fvec.add(pictureId);
		try {
			return erelationDAO.createCollectionQuery(RELATIONS_FOR_PICTURE, fvec);
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	public List<EntityRelationHeader> fetchRelationsForEntity(String eType, Long eId) {
		if(WebUtils.isNull(eType)) return null;
		if(eId<=0) return null;
		
		Vector<Object> fvector = new Vector<Object>();
		fvector.add(eType);
		fvector.add(eId);
		
		try {
			return erelationDAO.createCollectionQuery(RELATIONS_FOR_ENTITY,fvector );
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	public List<EntityRelationHeader> fetchRelationsForPredicateSubject(String predicate, String subject) {
		if(WebUtils.isNull(predicate)) return null;
		if(WebUtils.isNull(subject)) return null;
		
		Vector<Object> fvector = new Vector<Object>();
		fvector.add(predicate);
		fvector.add(subject);
		log.debug("=== fetching relations predicat-subject["+fvector+"]");

		try {
			return erelationDAO.createCollectionQuery(RELATIONS_BY_PREDICATE_NAME,fvector );
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	
	
	/**  === AUTOGENERATEDE GETTERS - SETTERS: BEGIN ======  */
	public AbstractDao<Article> getArticleDao() {
		return articDAO;
	}

	public void setArticleDao(AbstractDao<Article> articleDao) {
		this.articDAO = articleDao;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Article getArticle() {
		return article;
	}

	public void setArticle(Article article) {
		this.article = article;
	}

	public List<Article> getArticles() {
		return articles;
	}

	public void setArticles(List<Article> articles) {
		this.articles = articles;
	}
	/**  === AUTOGENERATEDE GETTERS - SETTERS: END ========  */

	
}
