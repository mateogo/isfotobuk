package ar.kennedy.is2011.db.dao;

import ar.kennedy.is2011.db.entities.Account;
import ar.kennedy.is2011.db.entities.PersonaFisica;
import ar.kennedy.is2011.db.entities.PersonaIdeal;
import ar.kennedy.is2011.db.entities.ContactosPerson;
import ar.kennedy.is2011.db.entities.Tag;
import ar.kennedy.is2011.db.entities.TagEntry;
import ar.kennedy.is2011.db.entities.Location;
import ar.kennedy.is2011.db.entities.EntityRelationHeader;
import ar.kennedy.is2011.db.exception.EntityNotFoundException;
import ar.kennedy.is2011.utils.WebUtils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;
import com.google.appengine.api.datastore.Key;


public class TagUtility implements Serializable {

	private static final long serialVersionUID = 7596454954378729377L;
	protected final Logger log = Logger.getLogger(getClass());

	private static final String TAG_BY_NAME             =  "SELECT e FROM Tag      e WHERE e.name   = :1";
	private static final String TAG_ENTRY_BY_TAG        =  "SELECT e FROM TagEntry e WHERE e.tagKey = :1";
	private static final String TAG_ENTRY_BY_TAG_ENTITY =  "SELECT e FROM TagEntry e WHERE e.tagKey = :1 AND e.entityType = :2 AND e.entityKey = :3  ";
	
	private Tag tag;
	private TagEntry tagEntry;
	private List<TagEntry> tagEntries;
	
	private List<Tag> wtags;

	AbstractDao<Tag> tagDAO = new AbstractDao<Tag>();
	AbstractDao<TagEntry> tentriesDAO = new AbstractDao<TagEntry>();
	

	public TagUtility() {
		// TODO Auto-generated constructor stub
	}

	public void updateTag(Tag tag){
		try{
			log.debug("=== trying update :Tag");
			tagDAO.persist(tag);

		} catch (Exception e) {
			tagDAO.rollBackTx();
			log.error(e.getMessage());

		}finally{
			
		}
	}
	public void updateTag(TagEntry tentry){
		try{
			log.debug("=== trying update :Tag");
			tagDAO.persist(tag);

		} catch (Exception e) {
			tagDAO.rollBackTx();
			log.error(e.getMessage());

		}finally{
			
		}
	}

	public Tag fetchTagById(Long id){
		if(id<=0) return null;
		try {
			return tagDAO.findById(Tag.class, id);

		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	public List<Tag> fetchTagsByName(String name) {
		try {
			return tagDAO.createCollectionQuery(TAG_BY_NAME, new Vector<Object>(Arrays.asList(new String[] {name})));
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	public Tag fetchTagByName(String name) {
		wtags = fetchTagsByName(name);
		if(wtags==null) return null;
		if(wtags.isEmpty()) return null;
		return wtags.get(0);
	}

	public Tag fetchTagByName(String name, String type) {
		if(WebUtils.isNull(type)) return fetchTagByName(name);
		
		wtags = fetchTagsByName(name);
		if(wtags==null) return null;
		if(wtags.isEmpty()) return null;
		for(Tag t:wtags){
			if(WebUtils.compare(type, t.getType())) return t;
		}
		return null;
	}

	public List<TagEntry> fetchTagEntriesByTag(Key tag) {
		Vector<Object> vec = new Vector<Object>();
		vec.add(tag);
		
		try {
			return tentriesDAO.createCollectionQuery(TAG_ENTRY_BY_TAG, vec);
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}
	
	public List<TagEntry> fetchTagEntriesByTag(Key tag, String eType, Key entity) {
		Vector<Object> vec = new Vector<Object>();
		vec.add(tag);
		vec.add(eType);
		vec.add(entity);
		
		try {
			return tentriesDAO.createCollectionQuery(TAG_ENTRY_BY_TAG_ENTITY, vec);
			
		} catch(EntityNotFoundException e) {
			return null;
		}
	}

	
	
	/** ======= Autogenerated Getters y Setters =========== */
	public Tag getTag() {
		return tag;
	}


	public void setTag(Tag tag) {
		this.tag = tag;
	}


	public TagEntry getTagEntry() {
		return tagEntry;
	}


	public void setTagEntry(TagEntry tagEntry) {
		this.tagEntry = tagEntry;
	}


	public List<TagEntry> getTagEntries() {
		return tagEntries;
	}


	public void setTagEntries(List<TagEntry> tagEntries) {
		this.tagEntries = tagEntries;
	}
	
}
